@model Leaguez.Models.League

@{
    ViewData["Title"] = "Create League";
}

<h2>@ViewData["Title"]</h2>
<hr />

<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" method="post">
            @* This displays validation errors from the controller, like "League name is required" *@
            <div asp-validation-summary="All" class="text-danger"></div>

            @* Security token to prevent cross-site request forgery *@
            @Html.AntiForgeryToken()

            <div class="form-group mb-3">
                <label for="leagueName" class="control-label">League Name</label>
                <input name="leagueName" class="form-control" placeholder="E.g., 'Weekend Warriors Cup'" />
            </div>

            <div class="form-group mb-3">
                <label class="control-label">Players</label>
                <div id="playerCardsContainer">
                    @* Start with two player input cards by default *@
                    <div class="card mb-2">
                        <div class="card-body d-flex align-items-center">
                            <input name="players" class="form-control" placeholder="Player 1" />
                        </div>
                    </div>
                    <div class="card mb-2">
                        <div class="card-body d-flex align-items-center">
                            <input name="players" class="form-control" placeholder="Player 2" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <button type="button" id="addPlayerBtn" class="btn btn-secondary">Add Player</button>
            </div>

            <div class="form-group">
                <input type="submit" value="Create League" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addPlayerBtn = document.getElementById('addPlayerBtn');
            const playerCardsContainer = document.getElementById('playerCardsContainer');
            const maxPlayers = 16;

            // Function to update placeholders and button state
            function updatePlayerCards() {
                const cards = playerCardsContainer.querySelectorAll('.card');
                cards.forEach((card, index) => {
                    // Update placeholder
                    const input = card.querySelector('input');
                    if (input) {
                        input.placeholder = `Player ${index + 1}`;
                    }

                    // Add or remove the 'Remove' button
                    let removeBtn = card.querySelector('.remove-player-btn');
                    if (cards.length > 2 && !removeBtn) {
                        // Add remove button if it doesn't exist and there are more than 2 players
                        const buttonHtml = '<button type="button" class="btn btn-danger btn-sm ms-2 remove-player-btn">&times;</button>';
                        card.querySelector('.card-body').insertAdjacentHTML('beforeend', buttonHtml);
                    } else if (cards.length <= 2 && removeBtn) {
                        // Remove the button if it exists and there are 2 or fewer players
                        removeBtn.remove();
                    }
                });

                // Disable 'Add Player' button if max players reached
                addPlayerBtn.disabled = cards.length >= maxPlayers;
            }

            // Event listener for the 'Add Player' button
            addPlayerBtn.addEventListener('click', function () {
                const cardCount = playerCardsContainer.querySelectorAll('.card').length;
                if (cardCount < maxPlayers) {
                    const newCard = document.createElement('div');
                    newCard.className = 'card mb-2';
                    newCard.innerHTML = `
                        <div class="card-body d-flex align-items-center">
                            <input name="players" class="form-control" />
                        </div>`;
                    playerCardsContainer.appendChild(newCard);
                    updatePlayerCards();
                }
            });

            // Event listener for removing a player (using event delegation)
            playerCardsContainer.addEventListener('click', function (e) {
                if (e.target && e.target.classList.contains('remove-player-btn')) {
                    // Find the parent .card element and remove it
                    e.target.closest('.card').remove();
                    updatePlayerCards();
                }
            });

            // Initial setup on page load
            updatePlayerCards();
        });
    </script>
    }